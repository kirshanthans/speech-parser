/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. grammar.jj */
/*@egen*/options {
  JAVA_UNICODE_ESCAPE = true;
                      
               
  STATIC = false;
                           
}

PARSER_BEGIN(Parser)                    //The parser class name is "Parser"
import java.io.*;
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/}
PARSER_END(Parser)


/////////////////////  Lexical Analyzer Rules  ////////////////////////


SKIP : {
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : 
{
  < NUMBER: (<DIGIT>)+ ( "." (<DIGIT>)+ )? >
|
  < #DIGIT: [ "0"-"9" ] >
}

TOKEN : { < DETERMINER: "the" | "every" | "this" | "a" | "an" > }

TOKEN: { < NOUN: "time" | "arrow" | "flies" | "widget" | "cat" > } 

TOKEN: { < PRONOUN: "i" | "we" | "this" | "you" | "us" > }

TOKEN: { < VERB: "is" | "are" | "have" | "has" | "make" | "time" 
                      | "flies" | "build" | "stores" | "buying" | "like" > }

TOKEN: { < ADJ: "time" | "big" | "high quality" | "fast" | "large"
                        | "precise" | "high" > }

TOKEN: { < PREPOSITION: "with" | "without" | "for" | "about" | "at" 
                               | "between" | "but" | "below" 
                               | "in" | "into" | "like" | "except" 
                               | "following" | "on" | "than" | "over" 
                               | "near" | "of" | "like" | "since" | "up" 
			       | "upon" | "within" | "by" > }

TOKEN : /* words */
{
  < WORD: (<LETTER>)+ >
|
  < #LETTER: ["a"-"z", "A"-"Z"] >
}

/* SEPARATORS */
TOKEN :
{
      < PERIOD: "." >
}


//////////////////////////   Grammar Rules  /////////////////////////////

ASTSpeech Speech()         :
{/*@bgen(jjtree) Speech */
  ASTSpeech jjtn000 = new ASTSpeech(JJTSPEECH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Speech */
    try {
/*@egen*/
    ( Sentence() <PERIOD> )+/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Sentence()           : 
{/*@bgen(jjtree) Sentence */
  ASTSentence jjtn000 = new ASTSentence(JJTSENTENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Sentence */
    try {
/*@egen*/
    ( NP() )?  VP()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NP()             :
{/*@bgen(jjtree) NounPhrase */
  ASTNounPhrase jjtn000 = new ASTNounPhrase(JJTNOUNPHRASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NounPhrase */
    try {
/*@egen*/
    ( Pronoun() | ( ( Determiner() )? ( Adjective() )* CN() ) ) (PP())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CN()              :
{/*@bgen(jjtree) CompoundNoun */
  ASTCompoundNoun jjtn000 = new ASTCompoundNoun(JJTCOMPOUNDNOUN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompoundNoun */
    try {
/*@egen*/
    Noun() ( Noun() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PP()             :
{/*@bgen(jjtree) PrepPhrase */
  ASTPrepPhrase jjtn000 = new ASTPrepPhrase(JJTPREPPHRASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrepPhrase */
    try {
/*@egen*/
    Preposition() NP()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VP()             :
{/*@bgen(jjtree) VerbPhrase */
  ASTVerbPhrase jjtn000 = new ASTVerbPhrase(JJTVERBPHRASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VerbPhrase */
    try {
/*@egen*/
    Verb() NP()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

///////////////////////// Grammar Leaf Nodes  //////////////////////////

void Noun()       :
{/*@bgen(jjtree) Noun */
 ASTNoun jjtn000 = new ASTNoun(JJTNOUN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Noun */
    try {
/*@egen*/
    t=<NOUN>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.setLexem(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Pronoun()          :
{/*@bgen(jjtree) Pronoun */
 ASTPronoun jjtn000 = new ASTPronoun(JJTPRONOUN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Pronoun */
    try {
/*@egen*/
    t=<PRONOUN>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.setLexem(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Determiner()             :
{/*@bgen(jjtree) Determiner */
 ASTDeterminer jjtn000 = new ASTDeterminer(JJTDETERMINER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Determiner */
    try {
/*@egen*/
    t=<DETERMINER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.setLexem(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Adjective()            :
{/*@bgen(jjtree) Adjective */
 ASTAdjective jjtn000 = new ASTAdjective(JJTADJECTIVE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Adjective */
    try {
/*@egen*/
    t=<ADJ>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.setLexem(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Preposition()              :
{/*@bgen(jjtree) Preposition */
 ASTPreposition jjtn000 = new ASTPreposition(JJTPREPOSITION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Preposition */
    try {
/*@egen*/
    t=<PREPOSITION>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.setLexem(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Verb()       :
{/*@bgen(jjtree) Verb */
 ASTVerb jjtn000 = new ASTVerb(JJTVERB);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Verb */
    try {
/*@egen*/
    t=<VERB>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.setLexem(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
